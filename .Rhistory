install.packages("swirl")
library("swirl")
swirl()
swirl()
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Regression Models")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Statistical Inference")
swirl()
5+7
x <- 5+7
x
y <- x - x
y <- x-3
y
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
wd()
getwd()
old.dir <- "/Users/nlevine"
old.dir <- getwd()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
?dir.create
dir.create(filepath("testdir2","testdir3"),)
dir.create("filepath("testdir2","testdir3")")
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive=TRUE)
setwd("Users/nlevine")
setwd(old.dir)
unlink("testdir", recursive=TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(.5,55,-10,6)
tf <- num_vect-1
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Nick")
my_name <- c(my_char, "Nick")
my_name
paste(my_name, collapse = " ")
paste("Hello",
| "world!", sep = " ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep = "")
a:z
"a":"z"
LETTERS
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y
| <- rnorm(1000)
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
y
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3],x[5],x[7])
[c(3,5,7)]
ind <- c(3,5,7)
c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <-
| c(foo = 11, bar = 2, norf = NA)
vect <-c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect <- c(11, 2,NA)
vect2 <- c(11, 2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(data.frame)
class(my_data)
cnames <- c("patient, "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(cnames, my_data)
colnames(cnames)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!5 == 7
FALSE & False
FALSE & FALSE
TRUE & c(TRUE,
| FALSE, FALSE)
TRUE & c(TRUE,FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTrue(6>4)
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints>7)
)
which(ints>7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(hi,hi,hi))
telegram(hi,hi,hi)
telegram('hi', 'hi')
submit()
submit()
mad_libs("NYC","happy","elbow")
submit()
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
cool
next()
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
apply(flags,
| class, character(1))
vapply(flags, class, characeter(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
summary(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement=TRUE,prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE,prob = c(0.3, 0.7))
flips
sum(flips)
?binom
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size=1, prob=.7)
rbinom(n=100, size=1, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(5, mean=10)
?rpois
rpois(5, lambda=10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time()-t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist , y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, subtitle="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
mtcars
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
nxt()
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
nxt()
20
10
25
1
2
3
4
summary(cars$price)
plot(child ~ parent, galton)
plot(jitter())
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope,ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
swirl
library("swirl")
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals^2/(n-2)))
sqrt(sum(fit$residuals^2/(n-2))
)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- sum(galton$child) / n
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(galton$child)
sRes <- deviance(galton)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees <- eliminate("Girth", trees)
trees2 <- eliminate("Girth", trees)
trees2 <- eliminate("Girth", trees)
head(trees)
trees2 <- trees
trees2 <- eliminate("Girth", trees)
exit()
quit()
0
info()
main()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Heightt + Constant -1, trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
load("/Users/nlevine/Downloads/drinking.RData")
drinking
ls
peak
list.files()
range(drinking)
setwd("Dropbox/dataviz")
data <- json
install.packages("rjson")
library("rjson")
json_file <- "csv/pokedex.json"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
json_data
cor(json_data)
